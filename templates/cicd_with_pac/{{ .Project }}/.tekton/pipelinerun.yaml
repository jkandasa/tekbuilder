---
apiVersion: tekton.dev/v1beta1
kind: PipelineRun
metadata:
  generateName: "{{ .Scaffold.Project }}-run-"
  annotations:
    # The event we are targeting as seen from the webhook payload
    # this can be an array too, i.e: [pull_request, push]
    pipelinesascode.tekton.dev/on-event: "[{{ .Scaffold.git_provider_event | join `, ` }}]"

    # The branch or tag we are targeting (ie: main, refs/tags/*)
    pipelinesascode.tekton.dev/on-target-branch: "[{{ .Scaffold.git_provider_branch | join `, ` }}]"

    # Fetch the git-clone task from hub, we are able to reference later on it
    # with taskRef and it will automatically be embedded into our pipeline.
    pipelinesascode.tekton.dev/task: ["git-clone", "buildah"]

    # Use maven task from hub
    #
    # pipelinesascode.tekton.dev/task-1: "maven"

    # You can add more tasks by increasing the suffix number, you can specify them as array to have multiple of them.
    # browse the tasks you want to include from hub on https://hub.tekton.dev/
    #
    # pipelinesascode.tekton.dev/task-2: "[curl, buildah]"

    # How many runs we want to keep.
    pipelinesascode.tekton.dev/max-keep-runs: "5"
spec:
  params:
    # The variable with brackets are special to Pipelines as Code
    # They will automatically be expanded with the events from Github.
    - name: repo_url
      value: {{ "{{ repo_url }}" }}
    - name: revision
      value: {{ "{{ revision }}" }}
    - name: image_reference
      value: "{{ .Scaffold.container_image_name }}"
  serviceAccountName: "{{ .Scaffold.Project }}-registry-sa"
  pipelineSpec:
    params:
      - name: repo_url
      - name: revision
      - name: image_reference
    workspaces:
      - name: source
    tasks:
      - name: fetch-repository
        taskRef:
          name: git-clone
        workspaces:
          - name: output
            workspace: source
        params:
          - name: url
            value: $(params.repo_url)
          - name: revision
            value: $(params.revision)
      - name: build-push-image 
        taskRef:
          name: buildah 
        runAfter:
          - fetch-repository 
        workspaces:
          - name: source
            workspace: tekton-workspace
        params:
          - name: IMAGE
            value: $(params.image_reference):$(tasks.fetch-repository.results.commit)
          - name: CONTEXT
            value: "." 
          - name: FORMAT
            value: "docker"
          - name: BUILD_EXTRA_ARGS
            description: Extra parameters passed for the build command when building images.
            default: ""
          - name: PUSH_EXTRA_ARGS
            description: Extra parameters passed for the push command when pushing images.
            type: string
            default: ""

  workspaces:
  - name: source
    volumeClaimTemplate:
      spec:
        accessModes:
          - ReadWriteOnce
        resources:
          requests:
            storage: 100Mi
